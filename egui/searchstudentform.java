/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package egui;

import static java.lang.Math.round;
import java.sql.*;
import java.math.*;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.*;

/**
 *
 * @author Marvin
 */
public class searchstudentform extends javax.swing.JFrame {

    static String username;
    String finalgrade[][] = new String[50][5];
    String sub_id = "";
    int total = 0;
    int totalp = 0;
    int totexam = 0;
    int studs = 0;
    double ptask, wworks, qass;
    String student_ID = "";
    private static DecimalFormat df2 = new DecimalFormat("#.##");
    String name = "mark";

    String sid = "";

    /**
     * Creates new form UserFrm
     */
    public searchstudentform(String subjectname, String sid, int w_works, int p_task, int q_ass, String student_ID) {
        this.student_ID = student_ID;
        System.out.println("SID :" + sid);
        this.sub_id = sid;
        this.ptask = p_task;
        this.wworks = w_works;
        this.qass = q_ass;
        System.out.println("ang id is :" + this.sid);

        initComponents();
        settable();
        settable2();
        settable3();
        settable4();
        setfinaltable();

        lrn.setText(student_ID);
        // this.lrn.setText(""+subjectname);
        this.ww.setText("WRITTEN WORKS :" + w_works);
        this.pt.setText("PERFORMANCE TASK :" + p_task);
        this.qa.setText("QUARTERLY ASSESSMENT: " + q_ass);
        this.ww2.setText("WRITTEN WORKS :" + w_works);
        this.pt2.setText("PERFORMANCE TASK :" + p_task);
        this.qa2.setText("QUARTERLY ASSESSMENT: " + q_ass);
        this.ww3.setText("WRITTEN WORKS :" + w_works);
        this.pt3.setText("PERFORMANCE TASK :" + p_task);
        this.qa3.setText("QUARTERLY ASSESSMENT: " + q_ass);
        this.ww4.setText("WRITTEN WORKS :" + w_works);
        this.pt4.setText("PERFORMANCE TASK :" + p_task);
        this.qa4.setText("QUARTERLY ASSESSMENT: " + q_ass);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        student_id = new javax.swing.JLabel();
        lrn = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        ww2 = new javax.swing.JLabel();
        pt2 = new javax.swing.JLabel();
        qa2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        table3 = new javax.swing.JTable();
        jLabel27 = new javax.swing.JLabel();
        ww3 = new javax.swing.JLabel();
        pt3 = new javax.swing.JLabel();
        qa3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        table4 = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        ww4 = new javax.swing.JLabel();
        pt4 = new javax.swing.JLabel();
        qa4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        table5 = new javax.swing.JTable();
        sp = new javax.swing.JScrollPane();
        view = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        ww = new javax.swing.JLabel();
        pt = new javax.swing.JLabel();
        qa = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        student_id.setText("STUDENT ID :");

        lrn.setText(""+username);

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16", "Title 17", "Title 18", "Title 19", "Title 20"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(table2);
        if (table2.getColumnModel().getColumnCount() > 0) {
            table2.getColumnModel().getColumn(0).setPreferredWidth(300);
        }

        jLabel19.setText("LEARNER'S NAME");

        ww2.setText("WRITTEN WORKS");

        pt2.setText("PEROFORMANCE TASK");

        qa2.setText("Quarterly Assessment");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145)
                .addComponent(ww2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                .addComponent(pt2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158)
                .addComponent(qa2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qa2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pt2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ww2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(264, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(60, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Second Quarter", jPanel5);

        table3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16", "Title 17", "Title 18", "Title 19", "Title 20"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(table3);
        if (table3.getColumnModel().getColumnCount() > 0) {
            table3.getColumnModel().getColumn(0).setPreferredWidth(300);
        }

        jLabel27.setText("LEARNER'S NAME");

        ww3.setText("WRITTEN WORKS");

        pt3.setText("PEROFORMANCE TASK");

        qa3.setText("Quarterly Assessment");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135)
                .addComponent(ww3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, Short.MAX_VALUE)
                .addComponent(pt3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158)
                .addComponent(qa3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ww3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qa3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pt3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(266, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(55, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Third Quarter", jPanel7);

        table4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16", "Title 17", "Title 18", "Title 19", "Title 20"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(table4);
        if (table4.getColumnModel().getColumnCount() > 0) {
            table4.getColumnModel().getColumn(0).setPreferredWidth(300);
        }

        jLabel23.setText("LEARNER'S NAME");

        ww4.setText("WRITTEN WORKS");

        pt4.setText("PEROFORMANCE TASK");

        qa4.setText("Quarterly Assessment");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135)
                .addComponent(ww4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, Short.MAX_VALUE)
                .addComponent(pt4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158)
                .addComponent(qa4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ww4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qa4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pt4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(266, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(54, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Fourth Quarter", jPanel6);

        table5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(table5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(799, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Summary of Quarterly Grades", jPanel1);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16", "Title 17", "Title 18", "Title 19", "Title 20"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(300);
        }

        jLabel7.setText("LEARNER'S NAME");

        ww.setText("WRITTEN WORKS");

        pt.setText("PEROFORMANCE TASK");

        qa.setText("Quarterly Assessment");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135)
                .addComponent(ww, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 286, Short.MAX_VALUE)
                .addComponent(pt, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158)
                .addComponent(qa, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(89, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ww, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qa, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pt, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(380, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(62, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(43, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout viewLayout = new javax.swing.GroupLayout(view);
        view.setLayout(viewLayout);
        viewLayout.setHorizontalGroup(
            viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 283, Short.MAX_VALUE))
        );
        viewLayout.setVerticalGroup(
            viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        sp.setViewportView(view);

        jTabbedPane1.addTab("First Quarter", sp);

        exit.setBackground(new java.awt.Color(0, 0, 102));
        exit.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("EXIT");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 0, 102));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("STUDENT SEARCH");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(588, 588, 588))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1384, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(student_id, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lrn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(student_id, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lrn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_exitActionPerformed
    private void settable() {
        try {
            DBKonek Konek = new DBKonek();
            Connection conn;
            conn = Konek.DBKonek();

            Statement stmt = conn.createStatement();
            Statement stmtp = conn.createStatement();

            String[] columnNames = {"          ", "W1", "W2","W3","W4","W5","TOTAL","%","P1","P2","P3","P4","P5","TOTAL","%","Q1","%","Grade"};
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columnNames);

            String sql = "SELECT * FROM tbl_grading where quarter = '1st Quarter' and worktype='Written Works' and sub_id =" + sub_id;
            stmt.execute(sql);
            ResultSet rs = stmt.getResultSet();

            String sqlp = "SELECT * FROM tbl_grading where quarter = '1st Quarter' and worktype='Prof Task' and sub_id = " + sub_id;
            stmtp.execute(sqlp);
            ResultSet rsp = stmtp.getResultSet();

            int[] hscore, hscore2;
            hscore = new int[5];
            hscore2 = new int[5];
            int i = 0;
            while (rs.next()) {
                hscore[i] = rs.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                total = total + hscore[i];
                i++;

            }
            i = 0;
            while (rsp.next()) {
                hscore2[i] = rsp.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                totalp += +hscore2[i];
                i++;

            }
            i = 0;
            Statement stmtq = conn.createStatement();
            stmtq.execute("SELECT * FROM tbl_grading where quarter = '1st Quarter'  and worktype='Quarter Ass' and sub_id = " + sub_id);
            ResultSet rsq = stmtq.getResultSet();
            int exam = 0;

            while (rsq.next()) {
                exam = rsq.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                totexam = exam;
                i++;

            }
            i = 0;

            model.addRow(new Object[]{"Highest Possible Score", hscore[0], hscore[1], hscore[2], hscore[3], hscore[4], total, "100%", hscore2[0], hscore2[1], hscore2[2], hscore2[3], hscore2[4], totalp, "100%", exam, "100%"});
            model.addRow(new Object[]{" "});

            Statement stmt1 = conn.createStatement();
            String sql1 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id left JOIN tbl_students ON tbl_rawscore.s_ID = tbl_students.s_ID where quarter = '1st Quarter' and sub_id = " + sub_id + " and tbl_students.s_ID ='" + student_ID + "'";
            stmt1.execute(sql1);
            String temp = "";
            String name = "";
            int q[] = new int[5];
            int w[] = new int[5];
            int r = 0;
            int y = 0;

            double total2 = 0;
            double total3 = 0;
            double total4 = 0;
            double perc, perc2, perc3;

            ResultSet rs1 = stmt1.getResultSet();
            while (rs1.next()) {
                String id = rs1.getString("s_ID");
                name = rs1.getString("s_fname") + " " + rs1.getString("s_lname");
                finalgrade[0][0] = name;
                try {
                    Statement stmt2 = conn.createStatement();
                    String sql2 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '1st Quarter' AND worktype='Written Works' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt2.execute(sql2);
                    ResultSet rs2 = stmt2.getResultSet();
                    Statement stmt3 = conn.createStatement();
                    String sql3 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '1st Quarter' AND worktype='Prof Task' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt3.execute(sql3);
                    ResultSet rs3 = stmt3.getResultSet();

                    Statement stmt4 = conn.createStatement();
                    String sql4 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '1st Quarter' AND worktype='Quarter Ass' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt4.execute(sql4);
                    ResultSet rs4 = stmt4.getResultSet();

                    if (temp.equals("") || !temp.equals(id)) {
                        temp = id;
                        while (rs2.next()) {
                            q[y] = rs2.getInt("score");

                            y++;
                        }
                        total2 += q[0] + q[1] + q[2] + q[3] + q[4];
                        perc = (total2 / total) * 100;
                        df2.setRoundingMode(RoundingMode.UP);
                        y = 0;

                        while (rs3.next()) {
                            w[y] = rs3.getInt("score");
                            y++;

                        }

                        total3 += w[0] + w[1] + w[2] + w[3] + w[4];
                        perc2 = (total3 / totalp) * 100;
                        y = 0;
                        while (rs4.next()) {
                            r = rs4.getInt("score");
                            y++;

                        }
                        total4 = r;
                        perc3 = (total4 / totexam) * 100;
                        System.out.println((wworks));

                        finalgrade[0][1] = Double.toString(round(((perc * (wworks / 100)) + (perc2 * (ptask / 100)) + (perc3 * (qass / 100)))));
                        if(finalgrade[0][1] == null){
                            finalgrade[0][1] = "0";
                            }

                        model.addRow(new Object[]{name, q[0], q[1], q[2], q[3], q[4], total2, df2.format(perc), w[0], w[1], w[2], w[3], w[4], total3, df2.format(perc2), r, df2.format(perc3),finalgrade[0][1]});
                        total2 = 0;
                        total3 = 0;
                        y = 0;

                    }

                } catch (SQLException e) {
                }

            }

            table.setModel(model);
            total = 0;
            totalp = 0;
            totexam = 0;
            studs = 0;
            table.getColumnModel().getColumn(0).setPreferredWidth(200);

        } catch (SQLException e) {
        }
    }

    private void settable2() {
        try {
            DBKonek Konek = new DBKonek();
            Connection conn;
            conn = Konek.DBKonek();

            Statement stmt = conn.createStatement();
            Statement stmtp = conn.createStatement();

            String[] columnNames = {"          ", "W1", "W2","W3","W4","W5","TOTAL","%","P1","P2","P3","P4","P5","TOTAL","%","Q1","%","Grade"};
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columnNames);

            String sql = "SELECT * FROM tbl_grading where quarter = '2nd Quarter' and worktype='Written Works' and sub_id = " + sub_id + "";
            stmt.execute(sql);
            ResultSet rs = stmt.getResultSet();

            String sqlp = "SELECT * FROM tbl_grading where quarter = '2nd Quarter' and worktype='Prof Task' and sub_id = " + sub_id + "";
            stmtp.execute(sqlp);
            ResultSet rsp = stmtp.getResultSet();
            int[] hscore, hscore2;
            hscore = new int[5];
            hscore2 = new int[5];
            int i = 0;
            while (rs.next()) {
                hscore[i] = rs.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                total = total + hscore[i];
                i++;

            }
            i = 0;
            while (rsp.next()) {
                hscore2[i] = rsp.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                totalp += +hscore2[i];
                i++;

            }
            i = 0;
            Statement stmtq = conn.createStatement();
            stmtq.execute("SELECT * FROM tbl_grading where quarter = '2nd Quarter'  and worktype='Quarter Ass' and sub_id = " + sub_id);
            ResultSet rsq = stmtq.getResultSet();
            int exam = 0;

            while (rsq.next()) {
                exam = rsq.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                totexam = exam;
                i++;

            }
            i = 0;

            model.addRow(new Object[]{"Highest Possible Score", hscore[0], hscore[1], hscore[2], hscore[3], hscore[4], total, "100%", hscore2[0], hscore2[1], hscore2[2], hscore[3], hscore2[4], totalp, "100%", exam, "100%"});
            model.addRow(new Object[]{" "});

            Statement stmt1 = conn.createStatement();
            String sql1 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id left JOIN tbl_students ON tbl_rawscore.s_ID = tbl_students.s_ID where quarter = '2nd Quarter' and sub_id = " + sub_id + " and tbl_students.s_ID ='" + student_ID + "'";
            stmt1.execute(sql1);
            String temp = "";
            String name = "";
            int q[] = new int[5];
            int w[] = new int[5];
            int y = 0;
            int r = 0;
            double total2 = 0;
            double total3 = 0;
            double total4 = 0;
            double perc, perc2, perc3;

            ResultSet rs1 = stmt1.getResultSet();
            while (rs1.next()) {
                String id = rs1.getString("s_ID");
                name = rs1.getString("s_fname") + " " + rs1.getString("s_lname");
                try {
                    Statement stmt2 = conn.createStatement();
                    String sql2 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter ='2nd Quarter' AND worktype='Written Works' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt2.execute(sql2);
                    ResultSet rs2 = stmt2.getResultSet();
                    Statement stmt3 = conn.createStatement();
                    String sql3 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter ='2nd Quarter' AND worktype='Prof Task' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt3.execute(sql3);
                    ResultSet rs3 = stmt3.getResultSet();

                    Statement stmt4 = conn.createStatement();
                    String sql4 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter ='2nd Quarter' AND worktype='Quarter Ass' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt4.execute(sql4);
                    ResultSet rs4 = stmt4.getResultSet();

                    if (temp.equals("") || !temp.equals(id)) {
                        temp = id;
                        while (rs2.next()) {
                            q[y] = rs2.getInt("score");

                            y++;
                        }
                        total2 += q[0] + q[1] + q[2] + q[3] + q[4];
                        perc = (total2 / total) * 100;
                        df2.setRoundingMode(RoundingMode.UP);
                        y = 0;

                        while (rs3.next()) {
                            w[y] = rs3.getInt("score");
                            y++;

                        }
                        total3 += w[0] + w[1] + w[2] + w[3] + w[4];
                        perc2 = (total3 / totalp) * 100;
                        y = 0;
                        while (rs4.next()) {
                            r = rs4.getInt("score");
                            y++;

                        }
                        total4 = r;
                        perc3 = (total4 / totexam) * 100;

                        System.out.println(perc);

                        finalgrade[0][2] = Double.toString(round(((perc * (wworks / 100)) + (perc2 * (ptask / 100)) + (perc3 * (qass / 100)))));
                        if(finalgrade[0][2] == null){
                            finalgrade[0][2] = "0";
                            }
                        model.addRow(new Object[]{name, q[0], q[1], q[2], q[3], q[4], total2, df2.format(perc), w[0], w[1], w[2], w[3], w[4], total3, df2.format(perc2), r, df2.format(perc3),finalgrade[0][2]});
                        total2 = 0;
                        total3 = 0;
                        total4 = 0;
                        y = 0;

                    }

                } catch (SQLException e) {
                }

            }

            table2.setModel(model);
            total = 0;
            totalp = 0;
            totexam = 0;
            studs = 0;
            table2.getColumnModel().getColumn(0).setPreferredWidth(200);

        } catch (SQLException e) {
        }
    }

    private void settable3() {
        try {

            DBKonek Konek = new DBKonek();
            Connection conn;
            conn = Konek.DBKonek();

            Statement stmt = conn.createStatement();
            Statement stmtp = conn.createStatement();

            String[] columnNames = {"          ", "W1", "W2","W3","W4","W5","TOTAL","%","P1","P2","P3","P4","P5","TOTAL","%","Q1","%","Grade"};
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columnNames);

            String sql = "SELECT * FROM tbl_grading where quarter = '3rd Quarter' and worktype='Written Works' and sub_id = " + sub_id + "";
            stmt.execute(sql);
            ResultSet rs = stmt.getResultSet();

            String sqlp = "SELECT * FROM tbl_grading where quarter = '3rd Quarter' and worktype='Prof Task' and sub_id = " + sub_id + "";
            stmtp.execute(sqlp);
            ResultSet rsp = stmtp.getResultSet();
            int[] hscore, hscore2;
            hscore = new int[5];
            hscore2 = new int[5];
            int i = 0;
            while (rs.next()) {
                hscore[i] = rs.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                total = total + hscore[i];
                i++;

            }
            i = 0;
            while (rsp.next()) {
                hscore2[i] = rsp.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                totalp += +hscore2[i];
                i++;

            }
            i = 0;
            Statement stmtq = conn.createStatement();
            stmtq.execute("SELECT * FROM tbl_grading where quarter = '3rd Quarter'  and worktype='Quarter Ass' and sub_id = " + sub_id);
            ResultSet rsq = stmtq.getResultSet();
            int exam = 0;

            while (rsq.next()) {
                exam = rsq.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                totexam = exam;
                i++;

            }
            i = 0;

            model.addRow(new Object[]{"Highest Possible Score", hscore[0], hscore[1], hscore[2], hscore[3], hscore[4], total, "100%", hscore2[0], hscore2[1], hscore2[2], hscore[3], hscore2[4], totalp, "100%", exam, "100%"});
            model.addRow(new Object[]{" "});

            Statement stmt1 = conn.createStatement();
            String sql1 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id left JOIN tbl_students ON tbl_rawscore.s_ID = tbl_students.s_ID where quarter = '3rd Quarter' and sub_id = " + sub_id + " and tbl_students.s_ID ='" + student_ID + "'";
            stmt1.execute(sql1);
            String temp = "";
            String name = "";
            int q[] = new int[5];
            int w[] = new int[5];
            int y = 0;
            double total2 = 0;
            double total3 = 0;
            double total4 = 0;
            int r = 0;
            double perc, perc2, perc3;

            ResultSet rs1 = stmt1.getResultSet();
            while (rs1.next()) {
                String id = rs1.getString("s_ID");
                name = rs1.getString("s_fname") + " " + rs1.getString("s_lname");
                try {
                    Statement stmt2 = conn.createStatement();
                    String sql2 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '3rd Quarter' AND worktype='Written Works' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt2.execute(sql2);
                    ResultSet rs2 = stmt2.getResultSet();
                    Statement stmt3 = conn.createStatement();
                    String sql3 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '3rd Quarter' AND worktype='Prof Task' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt3.execute(sql3);
                    ResultSet rs3 = stmt3.getResultSet();

                    Statement stmt4 = conn.createStatement();
                    String sql4 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '3rd Quarter' AND worktype='Quarter Ass' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt4.execute(sql4);
                    ResultSet rs4 = stmt4.getResultSet();

                    if (temp.equals("") || !temp.equals(id)) {
                        temp = id;
                        while (rs2.next()) {
                            q[y] = rs2.getInt("score");

                            y++;
                        }
                        total2 += q[0] + q[1] + q[2] + q[3] + q[4];
                        perc = (total2 / total) * 100;
                        df2.setRoundingMode(RoundingMode.UP);
                        y = 0;

                        while (rs3.next()) {
                            w[y] = rs3.getInt("score");
                            y++;

                        }
                        total3 += w[0] + w[1] + w[2] + w[3] + w[4];
                        perc2 = (total3 / totalp) * 100;

                        System.out.println(perc);

                        while (rs4.next()) {
                            r = rs4.getInt("score");
                            y++;

                        }
                        total4 = r;
                        perc3 = (total4 / totexam) * 100;

                        System.out.println(perc);

                        finalgrade[0][3] = Double.toString(round(((perc * (wworks / 100)) + (perc2 * (ptask / 100)) + (perc3 * (qass / 100)))));
                        if(finalgrade[0][3] == null){
                            finalgrade[0][3] = "0";
                            }
                        model.addRow(new Object[]{name, q[0], q[1], q[2], q[3], q[4], total2, df2.format(perc), w[0], w[1], w[2], w[3], w[4], total3, df2.format(perc2), r, df2.format(perc3),finalgrade[0][3]});
                        total2 = 0;
                        total3 = 0;
                        total4 = 0;
                        y = 0;

                    }

                } catch (SQLException e) {
                }

            }

            table3.setModel(model);
            total = 0;
            totalp = 0;
            totexam = 0;
            studs = 0;
            table3.getColumnModel().getColumn(0).setPreferredWidth(200);

        } catch (SQLException e) {
        }
    }

    private void settable4() {
        try {
            DBKonek Konek = new DBKonek();
            Connection conn;
            conn = Konek.DBKonek();

            Statement stmt = conn.createStatement();
            Statement stmtp = conn.createStatement();

            String[] columnNames = {"          ", "W1", "W2","W3","W4","W5","TOTAL","%","P1","P2","P3","P4","P5","TOTAL","%","Q1","%","Grade"};
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columnNames);

            String sql = "SELECT * FROM tbl_grading where quarter = '4th Quarter' and worktype='Written Works' and sub_id = " + sub_id + "";
            stmt.execute(sql);
            ResultSet rs = stmt.getResultSet();

            String sqlp = "SELECT * FROM tbl_grading where quarter = '4th Quarter' and worktype='Prof Task' and sub_id = " + sub_id + "";
            stmtp.execute(sqlp);
            ResultSet rsp = stmtp.getResultSet();
            int[] hscore, hscore2;
            hscore = new int[5];
            hscore2 = new int[5];
            int i = 0;
            while (rs.next()) {
                hscore[i] = rs.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                total = total + hscore[i];
                i++;

            }
            i = 0;
            while (rsp.next()) {
                hscore2[i] = rsp.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                totalp += +hscore2[i];
                i++;

            }

            i = 0;
            Statement stmtq = conn.createStatement();
            stmtq.execute("SELECT * FROM tbl_grading where quarter = '4th Quarter'  and worktype='Quarter Ass' and sub_id =" + sub_id + "");
            ResultSet rsq = stmtq.getResultSet();
            int exam = 0;

            while (rsq.next()) {
                exam = rsq.getInt("highscore");
                //String user = rs.getString("username");
                //String pass = rs.getString("passwd");
                totexam = exam;
                i++;

            }
            i = 0;

            model.addRow(new Object[]{"Highest Possible Score", hscore[0], hscore[1], hscore[2], hscore[3], hscore[4], total, "100%", hscore2[0], hscore2[1], hscore2[2], hscore[3], hscore2[4], totalp, "100%", exam, "100%"});
            model.addRow(new Object[]{" "});

            Statement stmt1 = conn.createStatement();
            String sql1 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id left JOIN tbl_students ON tbl_rawscore.s_ID = tbl_students.s_ID where quarter = '4th Quarter' and sub_id = " + sub_id + " and tbl_students.s_ID ='" + student_ID + "'";
            stmt1.execute(sql1);
            String temp = "";
            String name = "";
            int q[] = new int[5];
            int w[] = new int[5];
            int y = 0;
            int r = 0;
            double total2 = 0;
            double total3 = 0;
            double total4 = 0;
            double perc, perc2, perc3;

            ResultSet rs1 = stmt1.getResultSet();
            while (rs1.next()) {
                String id = rs1.getString("s_ID");
                name = rs1.getString("s_fname") + " " + rs1.getString("s_lname");
                try {
                    Statement stmt2 = conn.createStatement();
                    String sql2 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '4th Quarter' AND worktype='Written Works' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt2.execute(sql2);
                    ResultSet rs2 = stmt2.getResultSet();
                    Statement stmt3 = conn.createStatement();
                    String sql3 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '4th Quarter' AND worktype='Prof Task' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt3.execute(sql3);
                    ResultSet rs3 = stmt3.getResultSet();

                    Statement stmt4 = conn.createStatement();
                    String sql4 = "SELECT * FROM tbl_rawscore left join tbl_grading on tbl_rawscore.grade_id = tbl_grading.grade_id where s_ID =" + id + " AND quarter = '4th Quarter' AND worktype='Quarter Ass' and sub_id = " + sub_id + " order by tbl_grading.grade_id ASC";
                    stmt4.execute(sql4);
                    ResultSet rs4 = stmt4.getResultSet();

                    if (temp.equals("") || !temp.equals(id)) {
                        temp = id;
                        while (rs2.next()) {
                            q[y] = rs2.getInt("score");

                            y++;
                        }
                        total2 += q[0] + q[1] + q[2] + q[3] + q[4];
                        perc = (total2 / total) * 100;
                        df2.setRoundingMode(RoundingMode.UP);
                        y = 0;

                        while (rs3.next()) {
                            w[y] = rs3.getInt("score");
                            y++;

                        }
                        total3 += w[0] + w[1] + w[2] + w[3] + w[4];
                        perc2 = (total3 / totalp) * 100;

                        while (rs4.next()) {
                            r = rs4.getInt("score");

                        }
                        total4 = r;
                        perc3 = (total4 / totexam) * 100;

                        System.out.println(perc);

                        finalgrade[0][4] = Double.toString(round(((perc * (wworks / 100)) + (perc2 * (ptask / 100)) + (perc3 * (qass / 100)))));
                        if(finalgrade[0][4] == null){
                            finalgrade[0][4] = "0";
                            }
                        model.addRow(new Object[]{name, q[0], q[1], q[2], q[3], q[4], total2, df2.format(perc), w[0], w[1], w[2], w[3], w[4], total3, df2.format(perc2), r, df2.format(perc3),finalgrade[0][4]});
                        total2 = 0;
                        total3 = 0;
                        total4 = 0;
                        y = 0;

                    }

                } catch (SQLException e) {
                }

            }

            table4.setModel(model);
            total = 0;
            totexam = 0;
            totalp = 0;
            studs = 0;
            table4.getColumnModel().getColumn(0).setPreferredWidth(200);

        } catch (SQLException e) {
        }
    }

    public void setfinaltable() {

        String[] columnNames = {"NAME", "FIRST QUARTER", "SECOND QUARTER", "THIRD QUARTER", "FOURTH QUARTER", "FINAL GRADE"};
        DefaultTableModel model = new DefaultTableModel();
        df2.setRoundingMode(RoundingMode.UP);
        model.setColumnIdentifiers(columnNames);
        double fgrade = 0;
        for (int i = 0; i < finalgrade.length; i++) {
            if (finalgrade[i][1] != null && finalgrade[i][2] != null && finalgrade[i][3] != null && finalgrade[i][4] != null) {
                fgrade = ((Double.parseDouble(finalgrade[i][1]) + Double.parseDouble(finalgrade[i][2]) + Double.parseDouble(finalgrade[i][3]) + Double.parseDouble(finalgrade[i][4])) / 4);
                model.addRow(new Object[]{(finalgrade[i][0]), finalgrade[i][1], finalgrade[i][2], finalgrade[i][3], finalgrade[i][4], round(fgrade)});
            }

        }

        table5.setModel(model);
        table5.getColumnModel().getColumn(0).setPreferredWidth(200);
        table5.getColumnModel().getColumn(1).setPreferredWidth(150);
        table5.getColumnModel().getColumn(2).setPreferredWidth(150);
        table5.getColumnModel().getColumn(3).setPreferredWidth(150);
        table5.getColumnModel().getColumn(4).setPreferredWidth(150);
        table5.getColumnModel().getColumn(5).setPreferredWidth(150);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(searchstudentform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(searchstudentform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(searchstudentform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(searchstudentform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new searchstudentform("", "", 0, 0, 0, "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lrn;
    private javax.swing.JLabel pt;
    private javax.swing.JLabel pt2;
    private javax.swing.JLabel pt3;
    private javax.swing.JLabel pt4;
    private javax.swing.JLabel qa;
    private javax.swing.JLabel qa2;
    private javax.swing.JLabel qa3;
    private javax.swing.JLabel qa4;
    private javax.swing.JScrollPane sp;
    private javax.swing.JLabel student_id;
    private javax.swing.JTable table;
    private javax.swing.JTable table2;
    private javax.swing.JTable table3;
    private javax.swing.JTable table4;
    private javax.swing.JTable table5;
    private javax.swing.JPanel view;
    private javax.swing.JLabel ww;
    private javax.swing.JLabel ww2;
    private javax.swing.JLabel ww3;
    private javax.swing.JLabel ww4;
    // End of variables declaration//GEN-END:variables
}
